API CALL :-   package com.example.myapplication1

import android.media.Rating
import android.os.Bundle
import android.view.Surface
import android.view.SurfaceView
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.runtime.Composable
import com.example.myapplication1.ui.theme.MyApplication1Theme
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.MovableContent
import androidx.compose.runtime.State
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.res.painterResource
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import androidx.activity.viewModels

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //enableEdgeToEdge()
        setContent {
            var value by remember { mutableFloatStateOf(0f) }
            var checked by remember { mutableStateOf(true) }
            val productVM : ProductViewModel by viewModels()
            MyApplication1Theme {
                Column(modifier = Modifier
                    .padding(20.dp)
                    .fillMaxSize(),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.CenterHorizontally){
                    Button(onClick = { /TODO/ productVM.fetchProduct()
                    }) {
                        Text(text = "Click to make an API call ")
                    }
                }
            }
        }
    }
}


//Model class
data class Product(
    val id : Int,
    val title : String,
    val price : Double,
    val description : String,
    val category : String,
    val image : String,
    val rating : Rating
)

data class Image(
    val rate : Double,
    val Count : Int
)

interface ApiService{
    @GET("Products")
    suspend fun getProducts(): List<Product>

}

object RetrofitClient{
    private const val BASE_URL = "https://fakestoreapi.com"
    val apiService: ApiService by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(ApiService::class.java)
    }
}

class ProductRepository(private val apiService : ApiService){
    suspend fun getProducts(): List<Product>{
        return apiService.getProducts()
    }
}
class ProductViewModel : ViewModel(){
    private val _products = MutableLiveData<List<Product>>()
    val products : LiveData<List<Product>> get() = _products

    private val repository = ProductRepository(RetrofitClient.apiService)

    fun fetchProduct(){
        viewModelScope.launch {
            try{
                val productList = repository.getProducts()
                _products.postValue(productList)
                println("API DATA CALLED : $productList")
            }catch (e: Exception){
            }
        }
    }
}
